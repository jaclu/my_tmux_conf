#!/bin/sh
#
#  Copyright (c) 2022-2024: Jacob.Lundqvist@gmail.com
#  License: MIT
#
#  Part of https://github.com/jaclu/my_tmux_conf
#
#  Auto-generates new tmux conf and starts tmux
#
#  -q  re-uses current config
#  -s  share session - connects without detaching other connections
#  -2  generates a secondary env, I use this for testing changes and
#      plugins, using asdf to potentially run this with a different
#      tmux version
#

#  where  my_tmux_conf is located
my_tmux_conf_location="/usr/local/my_tmux_conf"

#
#  This needs the python module tmux_conf, and by default it will create
#  its own venv installing this.
#
#  If you dont need to use a venv for the python that compiles your tmux conf,
#  do: touch $HOME/.myt_skip_venv
#

if [ -f "$HOME"/.myt_skip_venv ]; then
    use_python_venv=false
else
    use_python_venv=true
fi

#  Logs how the latest tmux env was setup
myt_log="${TMPDIR:-/tmp}"/myt-"$USER".log

log_msg() {
    echo "$1"
    [ -n "$myt_log" ] && echo "$1" >>"$myt_log"
}

error_msg() {
    log_msg "ERROR: $1"
    exit "${2:-1}"
}

py_venv_activate() {
    #
    #  Activate Python venv, will only be called if use_python_venv ia true
    #
    if [ -d "$my_tmux_conf_location"/.venv ]; then
        log_msg "Using py venv: $my_tmux_conf_location/.venv"
        #  shellcheck source=/dev/null
        . "$my_tmux_conf_location"/.venv/bin/activate
    else
        log_msg "Creating py venv: $my_tmux_conf_location/.venv"
        python3 -m venv "$my_tmux_conf_location"/.venv
        log_msg "Using py venv: $my_tmux_conf_location/.venv"
        #  shellcheck source=/dev/null
        . "$my_tmux_conf_location"/.venv/bin/activate

        #  Python dependency
        log_msg "pip install tmux_conf"
        pip install tmux_conf
    fi
}

py_venv_deactivate() {
    #
    #  Dectivate Python venv, will only be called if use_python_venv ia true
    #
    log_msg "Exiting py venv: $my_tmux_conf_location/.venv"
    deactivate
}

chk_incompatible_socket() {
    #
    #  Ensure tmux socket is not used by another running version of tmux
    #
    socket_identifier=" -L $socket "

    #  shellcheck disable=SC2009
    ps ax | grep "$socket_identifier" | grep -qv -e /usr/bin/tmux -e "$tmux_vers" -e grep && {
        #  shellcheck disable=SC2009
        log_msg "
ERROR: $socket instances for version other than $tmux_vers running!
Intended to use: $TMUX_BIN

Found the following processes:

$(ps ax | grep -v grep | grep "$socket")"
        exit 1
    }
}

select_tmux_bin() {
    #
    #  Selects what tmux bin to use
    #
    TMUX_BIN=""
    if [ -n "$tmux_bin" ]; then
        # User defined tmux
        TMUX_BIN="$tmux_bin"
        unset tmux_bin
        return
    fi
    if [ -n "$ASDF_DIR" ]; then
        if asdf list | grep -q tmux; then
            TMUX_BIN="$("$ASDF_DIR"/bin/asdf which tmux)"
        fi
    else
        TMUX_BIN="$(command -v tmux)"
    fi
    [ -z "$TMUX_BIN" ] && TMUX_BIN="$(command -v "$tmux_bin")"

    [ -z "$TMUX_BIN" ] && error_msg "no tmux in PATH!"

    #  Needs to be $HOME not ~ since it is sent into tmux_conf

    #
    #  To not collide when checking for colliding versions
    #  add a prefix for chrooted envs, in order for socket
    #  names not to potentially collide with what is running
    #  on the host
    #
    if [ -f /etc/opt/AOK/this_fs_is_chrooted ]; then
        sock_prefix="chr-"
    else
        sock_prefix=""
    fi

    if $t2_env; then
        socket="$sock_prefix"serv2
        conf_file="$HOME/t2/tmux/tmux.conf"
    else
        socket="$sock_prefix"default
        conf_file="$HOME/.tmux.conf"
    fi

    tmux_vers="$($TMUX_BIN -V | cut -d ' ' -f 2)"
    #
    #  Handle some odd versions
    #
    case "$tmux_vers" in
    3.1-rc) tmux_vers="3.1" ;; # asdf tmux 3.1 reports as this

    next-3.4)
        #  shellcheck disable=SC2034 # TODO: check why this is alerting
        v_maj="3.4"
        ;; # Alpine 3.18 reports as this
    *) ;;
    esac

    log_msg "myt will use: $TMUX_BIN [$tmux_vers] - socket: $socket"
    chk_incompatible_socket
}

create_tmux_conf() {
    #
    #  Generate a new tmux conf file
    #
    cd "$my_tmux_conf_location" || {
        error_msg "ERROR: Failed to cd into: $my_tmux_conf_location"
    }

    $use_python_venv && py_venv_activate
    # f_py_output=$(mktemp)

    log_msg # spacer line
    # echo "Building tmux env using: $profile - saving it in: $conf_file"
    if $t2_env; then
        T2_ENV=1 "$profile" -r -t "$TMUX_BIN" "$conf_file" | tee -a "$myt_log" || {
            error_msg "Failed to log python output" 2
        }
    else
        "$profile" -r -t "$TMUX_BIN" "$conf_file" | tee -a "$myt_log" || {
            error_msg "Failed to log python output" 2
        }
    fi
    log_msg # spacer line

    $use_python_venv && py_venv_deactivate
    grep -q "Writing tmux" "$myt_log" || {
        error_msg "Python build failed to complete"
    }
}

start_tmux() {
    if $quick_mode; then
        log_msg "Using existing: $conf_file"
    else
        create_tmux_conf
    fi

    cd "$d_initial" || {
        error_msg "ERROR: Failed to cd back to [$d_initial]"
    }

    if $TMUX_BIN -L "$socket" list-sessions 2>/dev/null | grep -q main; then
        $shared_session && detch="" || detch="-d"
        eval "$TMUX_BIN" -L "$socket" -f "$conf_file" attach-session "$detch" -t main
    else
        $TMUX_BIN -L "$socket" -f "$conf_file" new-session -s main
    fi
    log_msg "[$(date)] exited tmux"
}

regular_tmux() {
    #
    #  Start the normal tmux env
    #
    # log_msg "-> running regular_tmux($profile) [$(hostname)]"
    if [ -z "$profile" ]; then
        detected_hostname="$(hostname -s | tr '[:upper:]' '[:lower:]')"
        # log_msg "-> detected hostname [$detected_hostname]"
        profile="${my_tmux_conf_location}/hostnames/${detected_hostname}.py"
        # log_msg "-> Automatically built profile-name: [$profile]"
    fi

    if [ ! -f "${profile}" ]; then
        echo
        log_msg "*** Warning: no profile found for: $profile"
        echo "***          using default profile after 3 seconds"
        echo
        sleep 3
        profile="$my_tmux_conf_location/default_plugins.py"
    else
        # handle soft links to other directories
        profile="$(realpath "$profile")"
    fi

    select_tmux_bin
    start_tmux
    #$TMUX_BIN -u new-session -ADs main
}

tmux_2() {
    #
    #  Inner tmux server, uses a separate config and prefix
    #
    if [ -z "$profile" ]; then
        profile="$my_tmux_conf_location/t2.py"
    fi

    #
    #  run from this location to pick up alternate tmux versions
    #  defined in this location
    #
    mkdir -p "$HOME"/t2

    #  To help pick up the right tmux go here to search
    # cd ~/t2 || {
    #     error_msg "ERROR: Failed to cd back to [$d_initial]"
    # }

    select_tmux_bin
    start_tmux
}

display_help() {
    cat <<EOF
Usage: myt [-q] [-2] [profile]

Generates config and starts tmux
Default profile is hostname
Options can be given in any order.

Availlable options:

-h       Print this help and exit.
-c       Use this tmux binary (default tmux)
-s       Share session
-q       Dont generate config, start tmux direcly
-2       Run in T2_ENV (inner tmux, other prefix)
profile  Run using specific profile
EOF
    exit 0
}

#===============================================================
#
#   Main
#
#===============================================================

shared_session=false
quick_mode=false
t2_env=false
profile=""
d_initial="$PWD" #  original pwd, will switch back to it before starting tmux

[ -n "$myt_log" ] && {
    echo "Will log progress to: $myt_log"
    echo
    echo "[$(date)] - starting $0" >"$myt_log"
}

while [ -n "$1" ]; do
    case "$1" in
    "-h" | "--help") display_help ;;
    "-c")
        shift
        tmux_bin="$1"
        ;;
    "-s") shared_session=true ;;
    "-q") quick_mode=true ;;
    "-2") t2_env=true ;;
    *) profile="$1" ;;
    esac

    shift
done

$quick_mode && [ -n "$profile" ] && {
    error_msg "Can not be combined: -q and $profile"
}

if $t2_env; then
    tmux_2
else
    regular_tmux
fi
