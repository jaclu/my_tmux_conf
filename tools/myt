#!/bin/sh
#
#  Copyright (c) 2022-2024: Jacob.Lundqvist@gmail.com
#  License: MIT
#
#  Part of https://github.com/jaclu/my_tmux_conf
#
#  Auto-generates new tmux conf and starts tmux
#
#  -q  re-uses current config
#  -s  share session - connects without detaching other connections
#  -2  generates a secondary env, I use this for testing changes and
#      plugins, using asdf to potentially run this with a different
#      tmux version
#

#
#  This needs the python module tmux_conf, and by default it will create
#  its own venv installing this.
#
#  If you dont need to use a venv for the python that compiles your tmux conf,
#  do: touch $HOME/.myt_skip_venv
#

if [ -f "$HOME"/.myt_skip_venv ]; then
    use_python_venv=false
else
    use_python_venv=true
fi

#  Logs how the latest tmux env was setup
myt_log="${TMPDIR:-/tmp}"/myt-"$USER".log

#---------------------------------------------------------------
#
#   notifications
#
#---------------------------------------------------------------

display_help() {
    cat <<EOF
Usage: myt [-q] [-2] [profile]

Generates config and starts tmux
Default profile is hostname.py
Options can be given in any order.

Availlable options:

-h       Print this help and exit.
-c       Use this tmux binary (default tmux)
-q       Dont generate config, start tmux direcly
-s       Share session
--venv   (Re-) Create venv for building tmux.conf
-2       Run in T2_ENV (inner tmux, other prefix)
profile  Run using specific profile
EOF
    exit 0
}

log_it() {
    echo "$1"
    [ -n "$myt_log" ] && {
        echo "$1" >>"$myt_log" || {
            error_msg "Failed to log python output to: $myt_log" 3
        }
    }
}

error_msg() {
    log_it "ERROR: $1"
    ex_code="${2:-1}"
    [ "$ex_code" -ge 0 ] && exit "$ex_code"
}

is_fs_chrooted() {
    # cmdline check:
    # grep -qv " / / " /proc/self/mountinfo || echo "is chrooted"

    # this quick and simple check doesnt work on ish
    # so lets pretend for now chroot does not happen on ish
    [ -d /proc/ish ] && return 1

    [ "$(uname -s)" != "Linux" ] && return 1 # can only chroot this on Linux
    ! grep -q " / / " /proc/self/mountinfo
}

#---------------------------------------------------------------
#
#   venv handling
#
#---------------------------------------------------------------

py_venv_create() {
    venv_location="$my_tmux_conf_location"/.venv
    [ -d "$venv_location" ] && {
        log_it "---  Removing previous venv: $venv_location"
        rm -rf "$venv_location"
    }
    log_it "---  Creating py venv: $venv_location"
    echo
    echo "If this seems to take forever, run: $my_tmux_conf_location/tools/progress-venv-build.sh"
    echo "in a seperate terminal to see progress"
    echo
    python3 -m venv "$venv_location"
    log_it " --  Using py venv: $venv_location"
    #  shellcheck source=/dev/null
    . "$venv_location"/bin/activate || {
        error_msg "Failure to activate new venv"
    }
    log_it " --  pip install -U pip"
    pip install -U pip

    #  Python dependency
    log_it " --  pip install tmux_conf"
    pip install tmux_conf || error_msg "Failure in: pip install tmux_conf"
    log_it "---  Created venv: $venv_location"
    echo
}

py_venv_activate() {
    #
    #  Activate Python venv, will only be called if use_python_venv ia true
    #
    scr_activate="$my_tmux_conf_location"/.venv/bin/activate
    if [ -f "$scr_activate" ]; then
        log_it " --  Using py venv: $my_tmux_conf_location/.venv"
        #  shellcheck source=/dev/null
        . "$scr_activate"
    else
        log_it "---  Not found: $scr_activate - (re-)creating venv..."
        py_venv_create
    fi
}

py_venv_deactivate() {
    #
    #  Dectivate Python venv, will only be called if use_python_venv ia true
    #
    log_it " --  Exiting py venv: $my_tmux_conf_location/.venv"
    deactivate
}

#---------------------------------------------------------------
#
#   running tmux
#
#---------------------------------------------------------------

select_tmux_bin() {
    #
    #  Selects what tmux bin to use
    #
    TMUX_BIN=""
    if [ -n "$tmux_bin" ]; then
        # User defined tmux
        TMUX_BIN="$tmux_bin"
        # log_it "><> user defined tmux: $TMUX_BIN"
        unset tmux_bin
        return
    fi
    if [ -n "$ASDF_DIR" ] && [ -e "$HOME/.asdf/shims/tmux" ]; then
        TMUX_BIN="$("$ASDF_DIR"/bin/asdf which tmux)"
        # log_it "><> asdf defined tmux: $TMUX_BIN"
        return
    fi
    TMUX_BIN="$(command -v tmux)"
    if [ -n "$TMUX_BIN" ]; then
        # log_it "><> tmux found in PATH: $TMUX_BIN"
        return
    fi

    if [ -d "$HOME"/.asdf ]; then
        #
        # Consider if asdf is used but has not been initialized
        # here are some common locations, worthwhile to examine
        #
        if ! source_asdf_if_found "$HOME"/.asdf/asdf.sh \
            /usr/local/opt/asdf/libexec/asdf.sh \
            /home/linuxbrew/.linuxbrew/opt/asdf/libexec/asdf.sh; then

            msg="tmux not initially found - ~/.asdf hinted at asdf being used,"
            msg="$msg but this failed to initialize it"
            error_msg "$msg"
        fi
        log_it "Found an uninitialized asdf env, activated it."
        log_it "Checking if it contains a tmux..."
        # hopefully now it is found!
        TMUX_BIN="$("$ASDF_DIR"/bin/asdf which tmux)"
        # log_it "><> un-iniziated asdf activated - now found tmux: $TMUX_BIN"
    fi
    [ -z "$TMUX_BIN" ] && error_msg "no tmux in PATH!"
}

define_tmux_env() {
    select_tmux_bin
    #
    #  To not collide when checking for colliding versions
    #  add a prefix for chrooted envs, in order for socket
    #  names not to potentially collide with what is running
    #  on the host
    #
    socket="$(id -u)"
    is_fs_chrooted && socket="${socket}-chr"
    if $t2_env; then
        socket="$socket"-serv2
        conf_file="$HOME/t2/tmux/tmux.conf"
    else
        socket="$socket"-default
        conf_file="$HOME/.tmux.conf"
    fi
    tmux_vers="$($TMUX_BIN -V | cut -d ' ' -f 2)"
    #
    #  Handle some odd versions
    #
    case "$tmux_vers" in
    3.1-rc) tmux_vers="3.1" ;; # asdf tmux 3.1 reports as this

    next-3.4)
        #  shellcheck disable=SC2034 # TODO: check why this is alerting
        v_maj="3.4"
        ;; # Alpine 3.18 reports as this
    *) ;;
    esac

    chk_incompatible_socket
}

source_asdf_if_found() {
    # try each param, and source the first found in the FS
    while [ -n "$1" ]; do
        if [ -f "$1" ]; then
            ASDF_DIR="$(dirname "$(realpath "$1")")"
            #  shellcheck source=/dev/null
            . "$1"
            return 0 # true
        fi
        shift
    done
    return 1 # false
}

chk_incompatible_socket() {
    #
    #  Ensure tmux socket is not used by another running version of tmux
    #
    socket_identifier=" -L $socket "

    #
    # verssion will just be mentioned in the path if it is a asdf tmux or similar
    # so the typical basic paths are excluded from this check
    #
    # ps ax | grep "$socket_identifier" | grep -qv -e /usr/bin/tmux -e /usr/local/bin/tmux -e "$tmux_vers" -e grep && {
    #
    #  shellcheck disable=SC2009
    ps ax | grep "$socket_identifier" | grep -i asdf | grep -v -e "$tmux_vers" -e grep && {
        #  shellcheck disable=SC2009
        log_it "
ERROR: instances for version other than $tmux_vers using socket: $socket  running!
Intended to use: $TMUX_BIN

Found the following processes:

$(ps ax | grep -v grep | grep "$socket")"
        exit 1
    }
}

indicate_tmux_connection_type() {
    connect_type="$1"
    [ -z "$connect_type" ] && {
        error_msg "indicate_tmux_connection_type() - no param1"
    }
    log_it "$connect_type $TMUX_BIN [$tmux_vers]"
    log_it "    socket: $socket - config: $conf_file"
    echo
}

is_tmux_ses_running() {
    $TMUX_BIN -L "$socket" list-sessions >/dev/null 2>&1
}

is_tmux_cli_connected() {
    [ -n "$($TMUX_BIN -L "$socket" list-clients)" ]
}

drop_other_clients() {
    # disconnect any other clients
    is_tmux_cli_connected && {
        #
        #  tmux -d just kills other clients using the same session
        #  this kills all other clients regardless of session
        #
        log_it "Detatching other clients currently using:"
        log_it "    $TMUX_BIN [$tmux_vers]"
        log_it "    socket: $socket"
        echo
        $TMUX_BIN -L "$socket" list-clients | cut -d: -f 1 |
            xargs -I{} "$TMUX_BIN" -L "$socket" detach-client -t {}
    }
}

ensure_cfg_file_present() {
    if [ -f "$conf_file" ]; then
        log_it "Using existing config file"
    else
        log_it "Conf file not found: $conf_file"
        log_it "Creating empty one to prevent 'No such file or directory' error"
        touch "$conf_file"
    fi
    echo
}

start_tmux() {
    if $quick_mode; then
        ensure_cfg_file_present
    else
        create_tmux_conf
    fi

    cd "$d_initial" || {
        error_msg "ERROR: Failed to cd back to [$d_initial]"
    }
    if is_tmux_ses_running; then
        $single_session && drop_other_clients
        indicate_tmux_connection_type "Attaching to"
        eval "$TMUX_BIN" -L "$socket" -f "$conf_file" attach-session -t main
    else
        indicate_tmux_connection_type "Starting"
        $TMUX_BIN -L "$socket" -f "$conf_file" new-session -s main
    fi
    log_it "[$(date)] [$?] exited tmux"
}

#---------------------------------------------------------------
#
#   Setup tmux env
#
#---------------------------------------------------------------

get_my_tmux_conf_location() {
    #  where  my_tmux_conf is located
    f_destination="$HOME"/.config/my_tmux_conf_location
    [ ! -f "$f_destination" ] && {
        echo "Location of my_tmux_conf repo not stored, go to repo folder"
        echo "and run ./deploy to solve his"
        exit 1
    }

    my_tmux_conf_location="$(cat "$f_destination")"
    [ ! -d "$my_tmux_conf_location" ] && {
        echo "Location of my_tmux_conf repo incorrect, go to repo folder"
        echo "and run ./deploy to solve his"
        exit 1
    }
}

create_tmux_conf() {
    #
    #  Generate a new tmux conf file
    #
    cd "$my_tmux_conf_location" || {
        error_msg "ERROR: Failed to cd into: $my_tmux_conf_location"
    }

    echo
    log_it "===  Buidling new tmux conf"
    $use_python_venv && {
        py_venv_activate || {
            error_msg "Failed to activate venv - run: myt --venv"
        }
    }
    # f_py_output=$(mktemp)

    log_it # spacer line
    # echo "Building tmux env using: $profile - saving it in: $conf_file"
    if $t2_env; then
        _s="$(T2_ENV=1 "$profile" -r -t "$TMUX_BIN" "$conf_file")" || {
            ex_code="$?"
            echo "ERROR: build failed!"
            log_it "$_s" # failed build
            error_msg "Failed to build tmux.conf [$ex_code]"
        }
    else
        _s="$("$profile" -r -t "$TMUX_BIN" "$conf_file")" || {
            ex_code="$?"
            log_it "$_s" # failed build
            error_msg "Failed to build tmux.conf [$ex_code]"
        }
    fi
    log_it "$_s" # successful build

    log_it # spacer line

    $use_python_venv && py_venv_deactivate
    if grep -q "Dependency tmux_conf not installed!" "$myt_log"; then
        error_msg "venv seems broken - run: myt --venv"
    elif ! grep -q "Writing tmux" "$myt_log"; then
        error_msg "Python build failed to complete, check: $myt_log"
    fi
    log_it "---  new tmux conf generated!"
    echo
}

find_host_profile() {

    if [ -n "$profile" ]; then
        if [ ! -f "$profile" ]; then
            error_msg "Defined profile not found: $profile" -1
            profile=""
            return 1
        fi
        return 0
    fi

    #
    #  Hostname profiles are named as hostname -s with suffix .py
    #
    _p="$(hostname -s | tr '[:upper:]' '[:lower:]').py"

    #
    #  Step 1 check user suplied hostnames folder
    #
    profile="${my_tmux_conf_location}/hostnames/$_p"
    [ -f "$profile" ] && return 0
    #
    #  Step 2 check repo suplied hostnames folder
    #
    profile="${my_tmux_conf_location}/sample_hosts/$_p"
    [ -f "$profile" ] && return 0

    profile=""
    return 1 # no hostname based profile found
}

regular_tmux() {
    #
    #  Start the normal tmux env
    #
    [ -n "$TMUX" ] && {
        error_msg "sessions should be nested with care, unset \$TMUX to force"
    }

    if ! find_host_profile; then
        log_it "*** Warning: no profile found"
        echo "***            using default profile after 3 seconds"
        echo
        sleep 3
        profile="$my_tmux_conf_location/default_plugins.py"
    # else
    #     # handle soft links to other directories
    #     profile="$(realpath "$profile")"
    fi

    define_tmux_env
    start_tmux
    #$TMUX_BIN -u new-session -ADs main
}

tmux_2() {
    #
    #  Inner tmux server, uses a separate config and prefix
    #
    if [ -z "$profile" ]; then
        profile="$my_tmux_conf_location/t2.py"
    fi

    #
    #  run from this location to pick up alternate tmux versions
    #  defined in this location
    #
    mkdir -p "$HOME"/t2

    #  To help pick up the right tmux go here to search
    cd ~/t2 || {
        error_msg "ERROR: Failed to cd back to [$d_initial]"
    }

    define_tmux_env
    start_tmux
}

#===============================================================
#
#   Main
#
#===============================================================

single_session=true
quick_mode=false
t2_env=false
profile=""
d_initial="$PWD" #  original pwd, will switch back to it before starting tmux

get_my_tmux_conf_location

if [ -n "$myt_log" ]; then
    echo "Will log progress to: $myt_log"
    echo
    echo "[$(date)] - starting $0" >"$myt_log"
else
    rm -f "$myt_log"
fi

while [ -n "$1" ]; do
    case "$1" in
    "-h" | "--help") display_help ;;
    "-c")
        shift
        tmux_bin="$1"
        ;;
    "-q") quick_mode=true ;;
    "-s") single_session=false ;;
    "--venv")
        log_it "===  Prepare the Python venv"
        py_venv_create
        deactivate
        exit 0
        ;;
    "-2") t2_env=true ;;
    *) profile="$1" ;;
    esac

    shift
done

$quick_mode && [ -n "$profile" ] && {
    error_msg "Can not be combined: -q and $profile"
}

[ "$TERM" = "xterm-kitty" ] && {
    # tmux cant handle this terminal type
    export TERM="screen-256color"
}

if $t2_env; then
    tmux_2
else
    regular_tmux
fi
